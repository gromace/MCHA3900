# README

## Camera Calibration: ##
Run `pixel2vector_calib2.m` to calibrate and output the optimised pose, `Ach` should be visible in the workspace. You can calibrate images 
or a video but need to select between `CheckerboardDetection` or `CheckerboardDetectionVideo`. 

### Main Scripts used for pixel to vector and vice versa ###
* `pixel2vector_calib2.m`
* `Vector2pixel.m`
* `CamCalib.m`

### Script operational order ###
# `pixel2vector_calib2.m` #
* Pixel 2 vector function uses `CheckerboardDetection` or `CheckerboardDetectionVideo` function (image and/or video) to process ImagePoints in pixel coordintates
* The normalised Vectors are assigned to `mat` files as `...nlerp...` and `...lerp...`
* These mat files along with sample pixels are used to create LUT using `griddedInterpolant` function using 1 image.
* An initial pose was placed and `repmat` though based on the number of frames
* Inputs to `fmincon` include Initial vectors, euler angles and griddedinterpolant vectors to be calibrated.
* Constraints
 	* Normalise Ustar (Interpolation grid vectors to be unit vectors) done by `norm-vect` function script
 	* z coordintate (camera to world distace) z>=0
 	* Angles: -95<psi,theta,phi<95
* LUT gets updated with `Ustar` using `updateGrid` and saved to`.mat` file
 
# `Vector2pixel.m` #
 * input known vectors in space and an initial guess for pixels as input
 * constraints
 	* Pmin<P<Pmax
 	* 0 < theta < 180 degress
 	* 1 - u*pixel2vector <= theta
 * use `fmincon` to calculate actual pixels given vectors

# `CamCalib.m` #
* uses the `ForwardKinamticModel` to calcualte the pose given the measured distances from camera to checkerboard
* Plots normalised Vectors and camera and checkboard in space

# `px2vec3.m` #
* Inputs to be optimised are 
	* grid vectors
	* x,y,z components of Vector (pose)
	* psi, theta, phi Euler angles (pose)
* Cost function is the d(u,v) = 1 - p2v_lerp(p,uij)*rQCc. 
* sum of d(u,v)
* Optimised grid is outputted

# `px2vec2`  #
* Uses lqsr as cost function
* Grid is averaged 
* interpolates from grid and normalises it and compares pose derived vectors

# `forwardkinamaticModel` #
* calculates the vector defining the normalised camera distance to checkerboard